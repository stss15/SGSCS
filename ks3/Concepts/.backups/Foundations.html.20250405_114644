<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Foundations of Computer Science</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Press+Start+2P&family=Open+Sans&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="../../styles/main.css">
    
    <link rel="stylesheet" href="../../styles/ks3_theme.css">
    
    <style>
        /* Base layout styles */
        html, body { height: 100%; margin: 0; overflow: hidden; font-family: var(--body-font, 'Open Sans', sans-serif); background-color: var(--primary-navy); color: var(--off-white); }
        body { display: flex; flex-direction: column; }
        main {
            flex-grow: 1; display: flex; flex-direction: column; overflow: hidden;
            padding: 1vh 20px; max-width: 1200px; width: 100%; margin: 0 auto; box-sizing: border-box;
        }
        .main-content {
            flex-grow: 1; display: flex; flex-direction: column; align-items: center;
            justify-content: center; width: 100%; padding: 1vh 0 2vh 0; min-height: 0; overflow: hidden;
        }
        header.main-header { flex-shrink: 0; }
        footer.main-footer { flex-shrink: 0; }

        /* Standard Title Style */
        .view-title {
            font-family: var(--heading-font); color: var(--gold); border-bottom: 1px solid var(--gold-dark);
            padding-bottom: 8px; margin: 0 auto 25px auto; /* Centered, defined bottom margin */
            width: auto; max-width: 90%; display: inline-block;
            font-size: 1.8rem; flex-shrink: 0; text-align: center;
        }

        /* Other general styles (unchanged) */
        .options-container { display: flex; justify-content: center; margin: 1.5vh 0; gap: 15px; flex-wrap: wrap; flex-shrink: 0; }
        .option-button { background-color: var(--navy-light); color: var(--gold-light); border: 2px solid var(--gold-dark); padding: 8px 18px; border-radius: 5px; cursor: pointer; font-size: 1rem; font-family: var(--heading-font); transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.2); }
        .option-button:hover { background-color: var(--gold-dark); color: var(--navy-dark); transform: translateY(-3px); box-shadow: 0 4px 8px rgba(0,0,0,0.3); }
        .option-button.active { background-color: var(--gold); color: var(--navy-dark); border-color: var(--gold); box-shadow: inset 0 2px 4px rgba(0,0,0,0.1); transform: translateY(1px); }
        .back-button { background-color: transparent; color: var(--gold); border: 1px solid var(--gold); padding: 8px 15px; border-radius: 5px; cursor: pointer; font-size: 0.9rem; margin-top: 1.5vh; transition: background-color 0.3s, transform 0.2s; flex-shrink: 0; }
        .back-button:hover { background-color: rgba(201, 177, 123, 0.2); transform: translateY(-2px); }

        /* Content Area Styles */
        .content-area { width: 100%; display: flex; flex-direction: column; align-items: center; max-width: 1100px; margin: 0 auto; height: 100%; }

        /* --- Concepts View Specific (layout unchanged) --- */
        #concepts-view { width: 100%; height: 100%; display: flex; flex-direction: column; align-items: center; }
        .concept-display-area { width: 100%; max-width: 1000px; flex: 1; position: relative; margin: 0; box-sizing: border-box; display: flex; flex-direction: column; padding: 2vh 60px; min-height: 0; align-items: center; }
        .concept-header { text-align: center; margin-bottom: 0; flex-shrink: 0; width: 100%; }
        .concept-content { flex: 1; position: relative; min-height: 450px; width: 100%; }
        .concept-footer { text-align: center; flex-shrink: 0; width: 100%; padding-top: 15px; }
        .concept-footer .view-toggle-button { margin-bottom: 5px; }
        .concept-slide { width: 100%; height: 100%; display: flex; gap: 20px; padding: 20px; box-sizing: border-box; background-color: rgba(13, 36, 66, 0.8); border-radius: 10px; border: 1px solid var(--gold); overflow: hidden; position: absolute; top: 0; left: 0; }
        .slide-column { height: 100%; box-sizing: border-box; display: flex; align-items: center; } .slide-column.left { flex: 0 0 40%; justify-content: center; padding-right: 10px; } .slide-column.right { flex: 1; flex-direction: column; padding: 10px; justify-content: center; overflow: hidden; } .character-image { max-width: 100%; max-height: 90%; width: auto; height: auto; object-fit: contain; filter: drop-shadow(3px 3px 5px rgba(0,0,0,0.3)); } .concept-container { background-color: var(--parchment); color: var(--primary-navy); border-radius: 8px; border: 1px solid var(--gold-dark); width: 100%; height: auto; max-height: 100%; display: flex; flex-direction: column; gap: 15px; overflow-y: auto; box-sizing: border-box; padding: 25px; } .concept-section { padding-bottom: 15px; margin-bottom: 15px; border-bottom: 1px solid var(--gold-dark); } .concept-section:last-child { border-bottom: none; margin-bottom: 0; padding-bottom: 0; } .concept-section .concept-name { font-family: var(--heading-font); font-size: 1.2rem; font-weight: 700; color: var(--primary-navy); margin-bottom: 10px; text-align: left; } .concept-section .concept-definition { font-size: 0.95rem; line-height: 1.4; font-style: normal; color: #333; text-align: left; } .character-section { display: flex; flex-direction: column; gap: 10px; } .character-section .character-name { font-family: var(--heading-font); font-size: 1.4rem; font-weight: 700; color: var(--primary-navy); margin-bottom: 10px; text-align: center; border-bottom: 1px solid var(--gold-dark); padding-bottom: 8px; } .character-section .character-lore { font-size: 1rem; line-height: 1.5; color: #333; text-align: left; }

        /* --- Skills View Specific --- */
        #skills-view { /* Sandwich Container */
            display: flex; flex-direction: column; align-items: center;
            width: 100%; height: 100%;
            padding: 2vh 20px; /* Consistent padding */
            box-sizing: border-box; min-height: 0;
        }
        /* .view-title is Top Bread */
        .skills-container { /* Filling */
            width: 100%; max-width: 1200px; display: flex; flex-direction: column;
            align-items: center; padding: 10px 20px; /* Internal padding */
            box-sizing: border-box; position: relative;
            flex-grow: 1; /* Takes up available space */
            justify-content: center; /* Vertically centers its children (player area & buttons) */
            min-height: 0; gap: 25px; /* Space between player area & buttons */
        }
        .player-character-area { /* Part of Filling */
            position: relative; width: 100%;
            min-height: 250px; /* Can adjust if needed */
            display: flex; justify-content: center; align-items: center;
            flex-shrink: 0;
        }
        .character-side { position: absolute; left: 150px; display: flex; justify-content: center; align-items: center; height: 100%; }
        /* MODIFIED description-side & hero-quote width and right position */
        .description-side {
            position: absolute; top: 50%;
            right: 40px; /* Adjusted from 80px */
            transform: translateY(-50%) translateX(20px);
            width: 550px; /* Increased from 450px */
            background: var(--primary-navy); border: 1px solid var(--gold); border-radius: 15px;
            opacity: 0; padding: 25px 30px; transition: all 0.5s ease; pointer-events: none;
        }
        .description-side.active { opacity: 1; transform: translateY(-50%) translateX(0); pointer-events: auto; }
        .hero-quote {
            position: absolute; top: 50%;
            right: 40px; /* Adjusted from 80px */
            transform: translateY(-50%);
            width: 550px; /* Increased from 450px */
            background: var(--primary-navy); border: 1px solid var(--gold); border-radius: 15px;
            padding: 20px 25px; /* Reduced padding */
            opacity: 1; transition: all 0.5s ease;
        }
        /* --- End Modifications --- */
        .hero-quote .title { 
            color: var(--gold); 
            font-family: var(--heading-font); 
            font-size: 2rem; 
            margin-bottom: 15px; /* Reduced margin */
            border-bottom: 1px solid var(--gold-dark); 
            padding-bottom: 8px; /* Reduced padding */
        }
        .hero-quote p { 
            color: var(--off-white); 
            font-size: 1.1rem; 
            line-height: 1.6; 
            text-align: left; 
            margin: 0;
        }
        .hero-quote.hidden { opacity: 0; transform: translateY(-50%) translateX(20px); pointer-events: none; }
        .skill-title { font-family: var(--heading-font); color: var(--gold); font-size: 2rem; margin-bottom: 20px; border-bottom: 1px solid var(--gold-dark); padding-bottom: 10px; }
        .skill-description { color: var(--off-white); font-size: 1.1rem; line-height: 1.6; text-align: left; }
        .player-character-area img { height: 300px; width: auto; object-fit: contain; filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.3)); transition: all 0.5s ease; opacity: 1; transform: scale(1) translateX(0); position: relative; z-index: 1; }
        .player-character-area img.transitioning { opacity: 0; transform: scale(0.95) translateX(-20px); filter: drop-shadow(0 0 20px rgba(201, 177, 123, 0.8)) brightness(1.2); }
        .skills-buttons { /* Part of Filling */
            display: flex; flex-wrap: wrap; justify-content: center;
            gap: 15px; padding: 10px 0; width: 100%; max-width: 800px;
            flex-shrink: 0;
        }
        #skills-view > .view-toggle-button { /* Bottom Bread */
             margin-top: auto; /* Push to bottom */
             margin-bottom: 5px; /* Consistent space below */
             flex-shrink: 0;
        }

        /* Rune button styles (unchanged) */
        .skill-button { display: flex; flex-direction: column; align-items: center; width: 110px; background: none; border: none; cursor: pointer; transition: transform 0.2s ease; position: relative; }
        .skill-rune { width: 70px; height: 70px; background-color: rgba(13, 36, 66, 0.9); border: 2px solid var(--gold-dark); border-radius: 15px; display: flex; align-items: center; justify-content: center; margin-bottom: 8px; position: relative; transition: all 0.3s ease; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2), inset 0 0 15px rgba(201, 177, 123, 0.1); }
        .skill-rune::before { content: ''; position: absolute; inset: 4px; border: 1px solid rgba(201, 177, 123, 0.3); border-radius: 12px; }
        .skill-rune i { font-size: 1.7rem; color: var(--gold); transition: all 0.3s ease; filter: drop-shadow(0 0 5px rgba(201, 177, 123, 0.5)); }
        .skill-button span { color: var(--gold); font-family: var(--heading-font); font-size: 0.85rem; text-align: center; transition: all 0.3s ease; }
        .skill-button:hover .skill-rune { transform: translateY(-5px); box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3), inset 0 0 20px rgba(201, 177, 123, 0.2); }
        .skill-button:hover .skill-rune i { filter: drop-shadow(0 0 8px rgba(201, 177, 123, 0.8)); }
        .skill-button.active .skill-rune { transform: translateY(2px); box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2), inset 0 0 25px rgba(201, 177, 123, 0.3); border-color: var(--gold); background-color: rgba(201, 177, 123, 0.15); }
        .skill-button.active .skill-rune i { filter: drop-shadow(0 0 12px rgba(201, 177, 123, 1)); color: var(--gold-light); }
        .skill-button.active span { color: var(--gold-light); text-shadow: 0 0 8px rgba(201, 177, 123, 0.5); }

        /* General View Toggle Button (unchanged) */
        .view-toggle-button { color: var(--gold); background: none; border: none; font-family: var(--heading-font); font-size: 1.1rem; cursor: pointer; transition: all 0.3s ease; padding: 8px 16px; text-decoration: none; position: relative; }
        .view-toggle-button::after { content: ''; position: absolute; width: 0; height: 2px; bottom: 0; left: 50%; background-color: var(--gold); transition: all 0.3s ease; }
        .view-toggle-button:hover { color: var(--gold-light); transform: translateY(-2px); }
        .view-toggle-button:hover::after { width: 100%; left: 0; }

        /* MODIFIED: Arrow Positioning - moved outside the box */
        .nav-arrow { 
            position: absolute; 
            top: 50%; 
            transform: translateY(-50%); 
            width: 40px; 
            height: 40px; 
            background-color: rgba(201, 177, 123, 0.2); 
            color: var(--gold); 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            border-radius: 50%; 
            font-size: 1.5rem; 
            cursor: pointer; 
            z-index: 100; 
            transition: all 0.3s ease;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }
        .nav-arrow:hover { 
            background-color: var(--gold); 
            color: var(--primary-navy);
            box-shadow: 0 0 15px rgba(201, 177, 123, 0.5);
        }
        /* Move arrows further outside */
        .nav-arrow.left-arrow { 
            left: -50px; 
        }
        .nav-arrow.right-arrow { 
            right: -50px; 
        }

        /* Magical Overlay (unchanged) */
        .magical-overlay { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%) scale(0); width: 200px; height: 200px; background: radial-gradient(circle, rgba(201, 177, 123, 0.4) 0%, rgba(201, 177, 123, 0) 70%); pointer-events: none; opacity: 0; transition: all 0.5s ease; z-index: 2; }
        .magical-overlay.active { transform: translate(-50%, -50%) scale(2); opacity: 1; }

        /* Responsive adjustments */
         /* MODIFIED max-width: 1200px rule */
         @media (max-width: 1200px) {
            .character-side { left: 80px; }
            .description-side, .hero-quote {
                right: 40px; /* Adjusted */
                width: 45%; /* Increased */
            }
            /* Adjust arrows at this breakpoint */
            .nav-arrow.left-arrow { left: -30px; }
            .nav-arrow.right-arrow { right: -30px; }
         }
         /* MODIFIED max-width: 992px rule */
         @media (max-width: 992px) {
            .skills-container { justify-content: center; }
            .player-character-area { min-height: 280px; height: auto; }
            .character-side { left: 40px; }
            .description-side, .hero-quote {
                right: 20px; /* Adjusted */
                width: 50%; /* Increased */
            }
            .skills-buttons { padding-bottom: 15px; }
            /* Adjust arrows at this breakpoint */
            .nav-arrow.left-arrow { left: -20px; }
            .nav-arrow.right-arrow { right: -20px; }
         }
         /* --- End Modifications --- */
         /* Responsive rules below 768px - MODIFIED for arrow positioning */
        @media (max-width: 768px) { 
            main { padding: 1vh 10px; } 
            .view-title { font-size: 1.6rem; margin-bottom: 20px; } 
            .concept-display-area { padding: 1vh 20px; } /* Increased padding for arrow space */
            .concept-content { min-height: 400px; } 
            .concept-slide { flex-direction: column; height: auto; padding: 10px; gap: 10px; } 
            .slide-column.left { flex: 0 0 auto; height: 180px; padding-right: 0; width: 100%; } 
            .slide-column.right { flex: 1; padding: 5px; height: auto; justify-content: flex-start; } 
            .character-image { max-height: 100%; max-width: 200px; } 
            .concept-container { padding: 15px; } 
            /* Reposition arrows to sides, but not as far out */
            .nav-arrow { 
                width: 35px !important; 
                height: 35px !important; 
                font-size: 1.2rem !important; 
            } 
            .nav-arrow.left-arrow { 
                left: -15px !important; 
            } 
            .nav-arrow.right-arrow { 
                right: -15px !important; 
            } 
            .concept-section .concept-name, .character-section .character-name { font-size: 1.1rem; } 
            .concept-section .concept-definition, .character-section .character-lore { font-size: 0.9rem; } 
            .concept-footer { padding-top: 10px; } 
            #skills-view > .view-toggle-button, .concept-footer > .view-toggle-button { margin-top: 10px; margin-bottom: 5px; } 
            #skills-view { padding: 1vh 10px; } 
            .skills-container { padding: 0 10px; gap: 15px; margin-top: auto; margin-bottom: auto; } 
            .player-character-area { flex-direction: column; min-height: unset; height: auto; } 
            .character-side { position: relative; left: auto; height: 200px; width: 100%; margin-bottom: 15px; } 
            .description-side, .hero-quote { position: relative; top: auto; right: auto; transform: none; width: 95%; max-width: 500px; margin: 0 auto; opacity: 1; pointer-events: auto; } 
            .description-side { opacity: 0; max-height: 0; padding: 0 15px; margin-top: 0; overflow: hidden; transition: all 0.5s ease; } 
            .description-side.active { opacity: 1; max-height: 500px; padding: 15px; margin-top: 15px; } 
            .hero-quote.hidden { max-height: 0; opacity: 0; padding-top: 0; padding-bottom: 0; margin-top:0; border-width: 0; overflow: hidden; transition: all 0.5s ease; } 
            .hero-quote:not(.hidden) { max-height: 500px; transition: all 0.5s ease;} 
            .player-character-area img { height: 200px; } 
            .player-character-area img.transitioning { transform: scale(0.95) translateY(-10px); } 
            .skills-buttons { gap: 15px; padding: 10px 0; } 
            .skill-button { width: 90px; } 
            .skill-rune { width: 60px; height: 60px; } 
            .skill-rune i { font-size: 1.5rem; } 
            .skill-button span { font-size: 0.75rem; } 
        }
         @media (max-width: 480px) { 
            .view-title { font-size: 1.4rem; } 
            .slide-column.left { height: 150px; } 
            .concept-container { padding: 10px; } 
            .concept-section .concept-name, .character-section .character-name { font-size: 1rem; } 
            .concept-section .concept-definition, .character-section .character-lore { font-size: 0.85rem; line-height: 1.4; } 
            .character-side { height: 180px; } 
            .player-character-area img { height: 180px; max-width: 150px; } 
            .description-side, .hero-quote { padding: 12px; width: 100%; } 
            .skill-title { font-size: 1.2rem; margin-bottom: 10px; } 
            .skill-description { font-size: 0.85rem; line-height: 1.4; } 
            .hero-quote .title { font-size: 1.3rem; margin-bottom: 12px; } 
            .hero-quote p { font-size: 0.9rem; } 
            .hero-quote .skills-list { gap: 3px 6px; padding: 8px 0;} 
            .hero-quote .skill-name { font-size: 0.8rem; } 
            .skills-buttons { gap: 8px; padding: 8px 0; } 
            .skill-button { width: 75px; } 
            .skill-rune { width: 50px; height: 50px; border-radius: 10px; margin-bottom: 6px; } 
            .skill-rune::before { inset: 3px; border-radius: 8px;} 
            .skill-rune i { font-size: 1.2rem; } 
            .skill-button span { font-size: 0.7rem; } 
            /* Position arrows slightly closer to edges */
            .nav-arrow.left-arrow { left: -10px !important; }
            .nav-arrow.right-arrow { right: -10px !important; }
         }

    </style>
    
    
</head>
<body>
    <!-- HEADER: This will be dynamically loaded via includes/header.html -->
    <header class="main-header nav-sticky">
        <nav class="main-nav">
            <div class="logo">
                <a href="../../index.html">Home</a>
            </div>
            <ul>
                <li><a href="../../ks3/year7/Landing_Page/Year7_Landing.html">Year 7</a></li>
                <li><a href="#">Year 8</a></li>
                <li><a href="#">Year 9</a></li>
                <li><a href="../../ks3/index.html">KS3</a></li>
                <li><a href="../../ks4/index.html">KS4</a></li>
                <li><a href="../../ks5/index.html">KS5</a></li>
            </ul>
            <button class="menu-toggle" aria-label="Toggle navigation" aria-expanded="false">
                <span class="hamburger-icon"></span>
            </button>
        </nav>
    </header>

    <main>
        <!-- CONTENT: Your content goes here -->
        <!-- 
        EXAMPLE CONTENT STRUCTURE:
        
        <div class="article-container">
            <div class="page-title">
                <h1>Your Page Title</h1>
            </div>
            
            <section class="content-section">
                <h2>Section Heading</h2>
                <p>Your content goes here...</p>
            </section>
        </div>
        -->
        <!-- CONTENT: Your content goes here -->
        <!-- 
        EXAMPLE CONTENT STRUCTURE:
        
        <div class="article-container">
            <div class="page-title">
                <h1>Your Page Title</h1>
            </div>
            
            <section class="content-section">
                <h2>Section Heading</h2>
                <p>Your content goes here...</p>
            </section>
        </div>
        -->
        <!-- CONTENT: Your content goes here -->
        <!-- 
        EXAMPLE CONTENT STRUCTURE:
        
        <div class="article-container">
            <div class="page-title">
                <h1>Your Page Title</h1>
            </div>
            
            <section class="content-section">
                <h2>Section Heading</h2>
                <p>Your content goes here...</p>
            </section>
        </div>
        -->
        <!-- CONTENT: Your content goes here -->
        <!-- 
        EXAMPLE CONTENT STRUCTURE:
        
        <div class="article-container">
            <div class="page-title">
                <h1>Your Page Title</h1>
            </div>
            
            <section class="content-section">
                <h2>Section Heading</h2>
                <p>Your content goes here...</p>
            </section>
        </div>
        -->
        <!-- CONTENT: Your content goes here -->
        <!-- 
        EXAMPLE CONTENT STRUCTURE:
        
        <div class="article-container">
            <div class="page-title">
                <h1>Your Page Title</h1>
            </div>
            
            <section class="content-section">
                <h2>Section Heading</h2>
                <p>Your content goes here...</p>
            </section>
        </div>
        -->
        <!-- CONTENT: Your content goes here -->
        <!-- 
        EXAMPLE CONTENT STRUCTURE:
        
        <div class="article-container">
            <div class="page-title">
                <h1>Your Page Title</h1>
            </div>
            
            <section class="content-section">
                <h2>Section Heading</h2>
                <p>Your content goes here...</p>
            </section>
        </div>
        -->
        <!-- CONTENT: Your content goes here -->
        <!-- 
        EXAMPLE CONTENT STRUCTURE:
        
        <div class="article-container">
            <div class="page-title">
                <h1>Your Page Title</h1>
            </div>
            
            <section class="content-section">
                <h2>Section Heading</h2>
                <p>Your content goes here...</p>
            </section>
        </div>
        -->
        <!-- CONTENT: Your content goes here -->
        <!-- 
        EXAMPLE CONTENT STRUCTURE:
        
        <div class="article-container">
            <div class="page-title">
                <h1>Your Page Title</h1>
            </div>
            
            <section class="content-section">
                <h2>Section Heading</h2>
                <p>Your content goes here...</p>
            </section>
        </div>
        -->
        <div class="main-content">
      <div class="content-area">
        <div id="concepts-view">
          <div class="concept-display-area" id="concept-display-area">
            <div class="concept-header">
              <h2 class="view-title">Core Concepts</h2>
            </div>
            <div class="concept-content"> </div>
            <div class="concept-footer">
              <button class="view-toggle-button" id="show-skills">Skills</button>
            </div>
          </div>
        </div>

        <div id="skills-view" style="display: none;">
          <h2 class="view-title">Key Skills</h2>
          <div class="skills-container">
            <div class="player-character-area"> </div>
            <div class="skills-buttons"> <button class="skill-button" data-skill="Programming"> <div class="skill-rune"> <i class="fas fa-code"></i> </div> <span>Programming</span> </button>
                 <button class="skill-button" data-skill="DataHandling"> <div class="skill-rune"> <i class="fas fa-database"></i> </div> <span>Data Handling</span> </button>
                 <button class="skill-button" data-skill="DigitalLiteracy"> <div class="skill-rune"> <i class="fas fa-laptop-code"></i> </div> <span>Digital Literacy</span> </button>
                 <button class="skill-button" data-skill="ComputationalThinking"> <div class="skill-rune"> <i class="fas fa-brain"></i> </div> <span>Computational Thinking</span> </button>
                 <button class="skill-button" data-skill="Creativity"> <div class="skill-rune"> <i class="fas fa-lightbulb"></i> </div> <span>Creativity</span> </button>
            </div>
          </div>
          <button class="view-toggle-button" id="show-concepts">Concepts</button>
        </div>
      </div>
    </div>
    </main>

    <!-- FOOTER: This will be dynamically loaded via includes/footer.html -->
    <footer class="main-footer">
        <p>&copy; 2025 Mr Stewart, Head of Science - St. George's School Düsseldorf</p>
    </footer>

    <!-- 
    SCRIPTS: Will be dynamically loaded
    The template system will automatically include:
    - /scripts/main.js
    - Any additional scripts defined in includes/footer.html
    -->
    <script src="../../scripts/main.js"></script>
    
    
    
    <script>
    // Javascript from original Foundations.html file (unchanged logic)
    document.addEventListener("DOMContentLoaded", () => {
        const concepts = [ { name: "Form", character: "Formius the Structurer", definition: "Refers to a structured interface or document used to collect, display, or process data from users. It serves as a bridge between the user and the system, enabling interaction through input fields, buttons, checkboxes, radio buttons, dropdowns, and other controls. Forms are fundamental in web development, software applications, and database management systems.", personification: "From the digital realm, Formius uses his enchanted feather to craft clear, interactive portals between users and technology. He turns abstract ideas into accessible forms, making complex systems easy to navigate.", img: "Form.png" }, { name: "Adaptation", character: "Adaptus the Evolving", definition: "The process of refining solutions through repeated cycles of development and testing, enabling improvement and efficiency in algorithms, programming, and digital system design.", personification: "Adaptus embodies change and steady improvement. With human insight fused with mechanical precision, he refines challenges into better solutions through constant evolution.", img: "Adaptation.png" }, { name: "Function", character: "Functia the Purposeful", definition: "The rationale behind designing and implementing digital systems or writing code, ensuring solutions align with user needs and address specific challenges effectively.", personification: "Guiding the way through the digital wilds, Functia charts every step with clear intent. Her decisions ensure that every code sequence meets real needs and achieves practical goals.", img: "Function.png" }, { name: "Logic", character: "Logos the Wise", definition: "The principles of reasoning used in algorithms and programming, forming the basis for creating reliable, efficient digital solutions.", personification: "In the quiet hours of thought, Logos unravels the hidden patterns behind problems. His clear and steady reasoning transforms complex puzzles into simple, reliable truths.", img: "Logic.png" }, { name: "Procedure", character: "Ordo Whiskerquill", definition: "A sequence of steps or instructions for performing tasks, critical in programming for creating structured and organized code.", personification: "Ordo is the keeper of order, carefully noting each step required to complete a task. His disciplined approach ensures that every instruction is followed with precision.", img: "Procedure.png" }, { name: "Process", character: "Proceus the Steadfast", definition: "A program that is actively running on a computer. It carries out tasks by following a set of instructions, using the computer's memory and resources while it runs.", personification: "On the front lines of active tasks, Proceus leads operations with unwavering strength. He ensures that every procedure runs smoothly and reliably, powering forward with determined precision.", img: "Process.png" }, { name: "Data", character: "Daton Cipherclad", definition: "Raw information in various forms (such as numbers, text, images) that can be collected, stored, and processed to produce meaningful outputs.", personification: "Daton gathers raw information and turns it into valuable insight. Merging human intuition with mechanical analysis, he reveals the stories hidden within streams of data.", img: "Data.png" }, { name: "Innovation", character: "Innovus Sparkwhistle", definition: "The creation and implementation of new ideas, products, or techniques in technology, driving advancements and problem-solving in Computer Science.", personification: "Ever curious and daring, Innovus experiments with new ideas to break boundaries. His fresh perspective ignites creative breakthroughs that reshape the digital landscape.", img: "Innovation.png" } ];
        let currentConceptIndex = 0; let isTransitioning = false;
        const imagePathBase = "../../assets/images/concepts/"; const placeholderImagePath = "../../assets/images/placeholder_concept.png";
        const skillImageBase = "../../assets/images/Skills/"; const defaultSkillImage = "Hero.png";
        const conceptsView = document.getElementById('concepts-view'); const skillsView = document.getElementById('skills-view');
        const showSkillsBtn = document.getElementById('show-skills'); const showConceptsBtn = document.getElementById('show-concepts');
        const conceptDisplayArea = document.getElementById('concept-display-area');
        const conceptContentArea = conceptDisplayArea?.querySelector('.concept-content');
        let playerImageElement;

        function createNavArrows() { if (!conceptContentArea) return; const existingArrows = conceptContentArea.querySelectorAll('.nav-arrow'); existingArrows.forEach(arrow => arrow.remove()); const leftArrow = document.createElement('div'); leftArrow.classList.add('nav-arrow', 'left-arrow'); leftArrow.innerHTML = '◀'; leftArrow.addEventListener('click', () => changeConcept(-1)); const rightArrow = document.createElement('div'); rightArrow.classList.add('nav-arrow', 'right-arrow'); rightArrow.innerHTML = '▶'; rightArrow.addEventListener('click', () => changeConcept(1)); conceptContentArea.appendChild(leftArrow); conceptContentArea.appendChild(rightArrow); }
        function createConceptSlides() { if (!conceptContentArea) { console.error("Concept content area not found."); return; } const existingSlides = conceptContentArea.querySelectorAll('.concept-slide'); existingSlides.forEach(slide => slide.remove()); console.log('Creating concept slides...'); concepts.forEach((concept, index) => { const slide = document.createElement('div'); slide.classList.add('concept-slide'); slide.dataset.index = index; slide.style.opacity = '0'; slide.style.transition = 'opacity 0.3s ease-in-out'; slide.style.display = 'none'; const leftCol = document.createElement('div'); leftCol.classList.add('slide-column', 'left'); const img = document.createElement('img'); img.classList.add('character-image'); img.src = imagePathBase + concept.img; img.alt = concept.character || concept.name; img.onerror = function() { this.src = placeholderImagePath; this.onerror = null; }; leftCol.appendChild(img); const rightCol = document.createElement('div'); rightCol.classList.add('slide-column', 'right'); const container = document.createElement('div'); container.classList.add('concept-container'); const characterSection = document.createElement('div'); characterSection.classList.add('character-section'); const charName = document.createElement('div'); charName.classList.add('character-name'); charName.textContent = concept.character; const charLore = document.createElement('div'); charLore.classList.add('character-lore'); charLore.textContent = concept.personification; characterSection.appendChild(charName); characterSection.appendChild(charLore); const conceptSection = document.createElement('div'); conceptSection.classList.add('concept-section'); const conceptName = document.createElement('div'); conceptName.classList.add('concept-name'); conceptName.textContent = `Concept: ${concept.name}`; const conceptDefinition = document.createElement('div'); conceptDefinition.classList.add('concept-definition'); conceptDefinition.textContent = concept.definition; conceptSection.appendChild(conceptName); conceptSection.appendChild(conceptDefinition); container.appendChild(characterSection); container.appendChild(conceptSection); rightCol.appendChild(container); slide.appendChild(leftCol); slide.appendChild(rightCol); conceptContentArea.appendChild(slide); }); createNavArrows(); console.log('Slides created:', conceptContentArea.querySelectorAll('.concept-slide').length); }
        function setActiveSlide(index) { if (!conceptContentArea) return; const slides = conceptContentArea.querySelectorAll('.concept-slide'); if (!slides[index]) { console.error('No slide found at index:', index); return; } slides.forEach((slide, i) => { slide.style.display = (i === index) ? 'flex' : 'none'; slide.style.opacity = (i === index) ? '0' : '0'; }); setTimeout(() => { if(slides[index]) slides[index].style.opacity = '1'; }, 50); console.log('Active slide set to index:', index); currentConceptIndex = index; }
        function changeConcept(direction) { if (isTransitioning || !conceptContentArea) return; isTransitioning = true; const slides = conceptContentArea.querySelectorAll('.concept-slide'); if (slides.length === 0) { isTransitioning = false; return; } const newIndex = (currentConceptIndex + direction + slides.length) % slides.length; const currentSlide = slides[currentConceptIndex]; const nextSlide = slides[newIndex]; currentSlide.style.opacity = '0'; setTimeout(() => { currentSlide.style.display = 'none'; nextSlide.style.display = 'flex'; void nextSlide.offsetWidth; nextSlide.style.opacity = '1'; currentConceptIndex = newIndex; setTimeout(() => { isTransitioning = false; }, 50); }, 300); }
        function toggleView(view) { if (view === 'skills') { conceptsView.style.display = 'none'; skillsView.style.display = 'flex'; } else { skillsView.style.display = 'none'; conceptsView.style.display = 'flex'; } }
        const skillDescriptions = { 'Programming': { title: 'Programming', description: 'Developing the ability to design, write, test, and refine code to solve tasks or create systems, integrating planning and structured design to ensure efficiency and clarity.' }, 'DataHandling': { title: 'Data Handling', description: 'Learning to collect, organise, analyse, and interpret data, presenting findings in meaningful ways to inform decision-making and problem-solving.' }, 'DigitalLiteracy': { title: 'Digital Literacy', description: 'Building skills to navigate, evaluate, and create digital content responsibly, fostering effective communication, ethical digital practices, and a strong foundation in online safety.' }, 'ComputationalThinking': { title: 'Computational Thinking', description: 'Approaching problems using algorithmic and logical reasoning, breaking down tasks into manageable parts, iterating on solutions, and applying abstraction and pattern recognition to develop creative and efficient outcomes.' }, 'Creativity': { title: 'Creativity', description: 'Exploring how creativity intersects with digital technologies, encouraging innovative thinking in coding, problem-solving, and content creation.' } };
        function initializePlayerArea() { 
            const playerArea = document.querySelector('.player-character-area'); 
            if (!playerArea) { 
                console.error("Player area not found."); 
                return;
            } 
            
            playerArea.innerHTML = ''; 
            
            const characterSide = document.createElement('div'); 
            characterSide.classList.add('character-side'); 
            
            const playerImage = document.createElement('img'); 
            playerImage.id = 'player-skill-image'; 
            playerImage.src = skillImageBase + defaultSkillImage; 
            playerImage.alt = 'Player Character'; 
            characterSide.appendChild(playerImage); 
            
            const descriptionSide = document.createElement('div'); 
            descriptionSide.classList.add('description-side'); 
            descriptionSide.innerHTML = `<div class="skill-title"></div><div class="skill-description"></div>`; 
            
            const heroQuote = document.createElement('div'); 
            heroQuote.classList.add('hero-quote'); 
            heroQuote.innerHTML = `
                <div class="title">Path to Mastery</div>
                <p>Mastering Computer Science begins with building five core skills.</p>
            `; 
            
            playerArea.appendChild(characterSide); 
            playerArea.appendChild(descriptionSide); 
            playerArea.appendChild(heroQuote); 
            
            const overlay = document.createElement('div'); 
            overlay.classList.add('magical-overlay'); 
            characterSide.appendChild(overlay); 
            
            playerImageElement = playerImage; 
        }
        function createMagicalOverlay() { const characterSide = document.querySelector('.character-side'); if (!characterSide) return null; let overlay = characterSide.querySelector('.magical-overlay'); if (!overlay) { overlay = document.createElement('div'); overlay.classList.add('magical-overlay'); characterSide.appendChild(overlay); } return overlay; }
        function transitionToNewImage(newSrc, newAlt, overlayElement) { const descriptionSide = document.querySelector('.description-side'); const heroQuote = document.querySelector('.hero-quote'); if (!playerImageElement || !descriptionSide || !overlayElement) { console.error("Missing elements for transition."); return; } const skillMatch = newAlt.match(/demonstrating (.+)$/); const skillName = skillMatch ? skillMatch[1].replace(/ /g, '') : null; const skillInfo = skillDescriptions[skillName] || null; playerImageElement.classList.add('transitioning'); overlayElement.classList.add('active'); descriptionSide.classList.remove('active'); if (heroQuote) heroQuote.classList.add('hidden'); setTimeout(() => { playerImageElement.src = newSrc; playerImageElement.alt = newAlt; if (skillInfo) { descriptionSide.querySelector('.skill-title').textContent = skillInfo.title; descriptionSide.querySelector('.skill-description').textContent = skillInfo.description; setTimeout(() => descriptionSide.classList.add('active'), 50); } else { descriptionSide.querySelector('.skill-title').textContent = ''; descriptionSide.querySelector('.skill-description').textContent = ''; if (heroQuote) heroQuote.classList.remove('hidden'); } const tempImg = new Image(); tempImg.onload = () => { console.log("New image loaded:", newSrc); setTimeout(() => { playerImageElement.classList.remove('transitioning'); overlayElement.classList.remove('active'); }, 50); }; tempImg.onerror = () => { console.error("Failed to load new image:", newSrc); playerImageElement.classList.remove('transitioning'); overlayElement.classList.remove('active'); }; tempImg.src = newSrc; }, 300); }
        function showSkill(button) { if (!playerImageElement) { initializePlayerArea(); } if (!playerImageElement) { console.error("Player image element not found after init."); return; } const currentlyActive = document.querySelector('.skill-button.active'); const overlayElement = document.querySelector('.magical-overlay') || createMagicalOverlay(); const skillName = button.dataset.skill; const skillImageMap = { 'Programming': 'Coding.png', 'DataHandling': 'Data_Handling.png', 'DigitalLiteracy': 'digital_literacy.png', 'ComputationalThinking': 'Computational_Thinking.png', 'Creativity': 'Creativity.png' }; const imagePath = skillImageBase + (skillImageMap[skillName] || `${skillName}.png`); if (currentlyActive === button) { button.classList.remove('active'); transitionToNewImage(skillImageBase + defaultSkillImage, "Player Character", overlayElement); } else { if (currentlyActive) currentlyActive.classList.remove('active'); button.classList.add('active'); const imgTest = new Image(); imgTest.onload = () => transitionToNewImage(imagePath, `Player Character demonstrating ${skillName}`, overlayElement); imgTest.onerror = () => { console.warn(`Skill image not found: ${imagePath}. Using default.`); transitionToNewImage(skillImageBase + defaultSkillImage, `Player Character (Skill: ${skillName})`, overlayElement); }; imgTest.src = imagePath; } }
        function verifySkillsView() { const skillsView = document.getElementById('skills-view'); if (!skillsView) return; const buttonsContainer = skillsView.querySelector('.skills-buttons'); if (!buttonsContainer || buttonsContainer.children.length === 0) { rebuildSkillButtons(); } document.querySelectorAll('.skill-button').forEach(button => { const newButton = button.cloneNode(true); button.parentNode.replaceChild(newButton, button); newButton.addEventListener('click', () => showSkill(newButton)); }); }
        function rebuildSkillButtons() { const skillsContainer = document.querySelector('.skills-container'); const existingButtons = document.querySelector('.skills-buttons'); if (existingButtons) { existingButtons.remove(); } const buttonsContainer = document.createElement('div'); buttonsContainer.classList.add('skills-buttons'); const buttons = [ { skill: 'Programming', icon: 'fas fa-code' }, { skill: 'DataHandling', icon: 'fas fa-database' }, { skill: 'DigitalLiteracy', icon: 'fas fa-laptop-code' }, { skill: 'ComputationalThinking', icon: 'fas fa-brain' }, { skill: 'Creativity', icon: 'fas fa-lightbulb' } ]; buttons.forEach(btn => { const button = document.createElement('button'); button.classList.add('skill-button'); button.dataset.skill = btn.skill; button.innerHTML = ` <div class="skill-rune"> <i class="${btn.icon}"></i> </div> <span>${btn.skill.replace(/([A-Z])/g, ' $1').trim()}</span> `; button.addEventListener('click', () => showSkill(button)); buttonsContainer.appendChild(button); }); skillsContainer.appendChild(buttonsContainer); }
        function setupEventListeners() { const skillsButton = document.getElementById('show-skills'); const conceptsButton = document.getElementById('show-concepts'); if (skillsButton) skillsButton.addEventListener('click', () => toggleView('skills')); if (conceptsButton) conceptsButton.addEventListener('click', () => toggleView('concepts')); document.querySelectorAll('.skill-button').forEach(button => { const newButton = button.cloneNode(true); button.parentNode.replaceChild(newButton, button); newButton.addEventListener('click', () => showSkill(newButton)); }); const menuToggle = document.querySelector('.menu-toggle'); const mainNav = document.querySelector('.main-nav ul'); if (menuToggle && mainNav) { menuToggle.addEventListener('click', () => { const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true'; menuToggle.setAttribute('aria-expanded', !isExpanded); mainNav.classList.toggle('active'); }); } }
        function initialize() { if (!conceptsView || !skillsView || !conceptDisplayArea ) { console.error("Initialization failed: Core view elements missing."); return; } if (!conceptContentArea){ console.error("Initialization failed: '.concept-content' area missing."); return; } initializePlayerArea(); createConceptSlides(); setActiveSlide(0); conceptsView.style.display = 'flex'; skillsView.style.display = 'none'; verifySkillsView(); setupEventListeners(); }
        initialize();
    });
    </script>
    
    
</body>
</html>